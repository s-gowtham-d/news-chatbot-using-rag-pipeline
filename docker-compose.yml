version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: news-chatbot-redis
    ports:
      - "6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - news-chatbot-network

  backend:
    image: gowthamac/webhook:news-bot-v1
    container_name: news-chatbot-backend
    ports:
      - "5009:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - JINA_API_KEY=${JINA_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_TTL=86400
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - news-chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Qdrant Vector Database (if running locally)
  # Uncomment if you want to run Qdrant locally instead of using Qdrant Cloud
  # qdrant:
  #   image: qdrant/qdrant:latest
  #   container_name: news-chatbot-qdrant
  #   ports:
  #     - "6333:6333"
  #     - "6334:6334"
  #   volumes:
  #     - qdrant_data:/qdrant/storage
  #   environment:
  #     - QDRANT__SERVICE__HTTP_PORT=6333
  #     - QDRANT__SERVICE__GRPC_PORT=6334
  #   restart: unless-stopped
  #   networks:
  #     - news-chatbot-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  news-chatbot-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  # qdrant_data:
  #   driver: local